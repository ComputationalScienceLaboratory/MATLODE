% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%                                                                  
% The Stoichiometric Chemical Model File                           
%                                                                  
% Generated by KPP-2.2.3 symbolic chemistry Kinetics PreProcessor  
%       (http://www.cs.vt.edu/~asandu/Software/KPP)                
% KPP is distributed under GPL, the general public licence         
%       (http://www.gnu.org/copyleft/gpl.html)                     
% (C) 1995-1997, V. Damian & A. Sandu, CGRER, Univ. Iowa           
% (C) 1997-2005, A. Sandu, Michigan Tech, Virginia Tech            
%     With important contributions from:                           
%        M. Damian, Villanova University, USA                      
%        R. Sander, Max-Planck Institute for Chemistry, Mainz, Germany
%                                                                  
% File                 : cbm_Stoichiom.m                           
% Time                 : Fri Mar 15 14:06:05 2013                  
% Working directory    : /home/sandu/kpp-2.2.3/examples/Cbm_matlab 
% Equation file        : cbm.kpp                                   
% Output root filename : cbm                                       
%                                                                  
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~




% Begin Derivative w.r.t. Rate Coefficients                        

% ------------------------------------------------------------------------------
% Subroutine for the derivative of Fun with respect to rate coefficients
% -----------------------------------------------------------------------------

DFDR = function dFun_dRcoeff( V, F, NCOEFF, JCOEFF )

% V/F - Concentrations of variable/fixed species            
% NCOEFF - the number of rate coefficients with respect to which we differentiate
% JCOEFF - a vector of integers containing the indices of reactions (rate
%          coefficients) with respect to which we differentiate
%      INTEGER JCOEFF(NCOEFF)       
% DFDR  - a matrix containg derivative values; specifically, 
%         column j contains d Fun(1:32) / d RCT( JCOEFF(j) )
%         for each 1 <= j <= NCOEFF
%         This matrix is stored in a column-wise linearized format
%      KPP_REAL DFDR(32*NCOEFF)

% A_RPROD - Local vector with reactant products      
% Compute the reactant products of all reactions     
      A_RPROD = ReactantProd ( V, F );

% Compute the derivatives by multiplying column JCOEFF(j) of the stoichiometric matrix with A_RPROD       
      for j=1:NCOEFF
%                  Initialize the j-th column of derivative matrix to zero       
         for i=1:32
           DFDR(i+32*(j-1)) = 0.0;
         end
%                  Column JCOEFF(j) in the stoichiometric matrix times the
%                  reactant product  of the JCOEFF(j)-th reaction      
%                  give the j-th column of the derivative matrix   
         aj = A_RPROD(JCOEFF(j));
         for k=CCOL_STOICM(JCOEFF(j)):CCOL_STOICM(JCOEFF(j)+1)-1
           DFDR(IROW_STOICM(k)+32*(j-1)) = STOICM(k)*aj;
         end
      end
      
return % dFun_dRcoeff

% End Derivative w.r.t. Rate Coefficients                          


% Begin Jacobian Derivative w.r.t. Rate Coefficients               

% ------------------------------------------------------------------------------
% Subroutine for the derivative of Jac with respect to rate coefficients
% Times a user vector
% -----------------------------------------------------------------------------

DJDR = function dJac_dRcoeff( V, F, U, NCOEFF, JCOEFF )

% V - Concentrations of variable/fixed species            
%        KPP_REAL V(32), F(NFIX)
% U - User-supplied Vector           
%         KPP_REAL U(32)
% NCOEFF - the number of rate coefficients with respect to which we differentiate
%       INTEGER NCOEFF       
% JCOEFF - a vector of integers containing the indices of reactions (rate
%          coefficients) with respect to which we differentiate
%          INTEGER JCOEFF(NCOEFF)       
% DFDR  - a matrix containg derivative values; specifiy, 
%         column j contains d Jac(1:32) / d RCT( JCOEFF(j) ) * U
%                     for each 1 <= j <= NCOEFF
%         This matrix is stored in a column-wise linearized format
%         KPP_REAL DJDR(32*NCOEFF)

% Local vector for Jacobian of reactant products
%         KPP_REAL JV_RPROD(NJVRP)
% Compute the Jacobian of all reactant products   
      JV_RPROD = JacReactantProd( V, F );

% Compute the derivatives by multiplying column JCOEFF(j) of the stoichiometric matrix with A_PROD       
      for j=1:NCOEFF
%                  Initialize the j-th column of derivative matrix to zero       
         for i=1,32
           DJDR(i+32*(j-1)) = 0.0;
         end
%                  Column JCOEFF(j) in the stoichiometric matrix times the
%                  ( Gradient of reactant product of the JCOEFF(j)-th reaction X user vector )    
%                  give the j-th column of the derivative matrix   
%
%          Row JCOEFF(j) of JV_RPROD times the user vector
         aj = 0.0;
         for k=CROW_JVRP(JCOEFF(j)):CROW_JVRP(JCOEFF(j)+1)-1
             aj = aj + JV_RPROD(k)*U(ICOL_JVRP(k));
         end
%          Column JCOEFF(j) of Stoichiom. matrix times aj         
         for k=CCOL_STOICM(JCOEFF(j)):CCOL_STOICM(JCOEFF(j)+1)-1
           DJDR(IROW_STOICM(k)+32*(j-1)) = STOICM(k)*aj;
         end
      end
      
return % dJac_dRcoeff

% End Jacobian Derivative w.r.t. Rate Coefficients                 

