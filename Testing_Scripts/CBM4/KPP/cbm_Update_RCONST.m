% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%                                                                  
% Update_RCONST - function to update rate constants                
%   Arguments :                                                    
%                                                                  
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%                                                                  
% Generated by KPP - symbolic chemistry Kinetics PreProcessor      
%     KPP is developed at CGRER labs University of Iowa by         
%     Valeriu Damian & Adrian Sandu                                
%                                                                  
% File                 : cbm_Update_RCONST.m                       
% Time                 : Thu Aug  6 10:22:09 4454167               
% Working directory    : /home/sandu/kpp-2.2.3/examples/Cbm_matlab 
% Equation file        : cbm.kpp                                   
% Output root filename : cbm                                       
%                                                                  
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function   cbm_Update_RCONST ( )

global SUN TEMP RCONST


% Begin INLINED RCONST                                             


% End INLINED RCONST                                               

   RCONST(1) = (8.89E-3*SUN) ;
   RCONST(2) = (ARR2(1.4E+3,1175.0)) ;
   RCONST(3) = (ARR2(1.8E-12,-1370.0)) ;
   RCONST(5) = (ARR2(1.6E-13,687.0)) ;
   RCONST(6) = (ARR2(2.2E-13,602.0)) ;
   RCONST(7) = (ARR2(1.2E-13,-2450.0)) ;
   RCONST(8) = (3.556E-04*SUN) ;
   RCONST(9) = (2.489E-05*SUN) ;
   RCONST(10) = (ARR2(1.9E+8,390.0)) ;
   RCONST(12) = (ARR2(1.6E-12,-940.0)) ;
   RCONST(13) = (ARR2(1.4E-14,-580.0)) ;
   RCONST(14) = (1.378E-01*SUN) ;
   RCONST(15) = (ARR2(1.3E-11,250.0)) ;
   RCONST(16) = (ARR2(2.5E-14,-1230.0)) ;
   RCONST(17) = (ARR2(5.3E-13,256.0)) ;
   RCONST(19) = (ARR2(3.5E+14,-10897.0)) ;
   RCONST(20) = (ARR2(1.8E-20,530.0)) ;
   RCONST(22) = (ARR2(4.5E-13,806.0)) ;
   RCONST(23) = (1.511e-03*SUN) ;
   RCONST(26) = (ARR2(1.0E-12,713.0)) ;
   RCONST(27) = (ARR2(5.1E-15,1000.0)) ;
   RCONST(28) = (ARR2(3.7E-12,240.0)) ;
   RCONST(29) = (ARR2(1.2E-13,749.0)) ;
   RCONST(30) = (ARR2(4.8E+13,-10121.0)) ;
   RCONST(31) = (ARR2(1.3E-12,380.0)) ;
   RCONST(32) = (ARR2(5.9E-14,1150.0)) ;
   RCONST(33) = (ARR2(2.2E-38,5800.0)) ;
   RCONST(34) = (6.312E-06*SUN) ;
   RCONST(35) = (ARR2(3.1E-12,-187.0)) ;
   RCONST(38) = (2.845E-05*SUN) ;
   RCONST(39) = (3.734E-05*SUN) ;
   RCONST(40) = (ARR2(3.0E-11,-1550.0)) ;
   RCONST(42) = (ARR2(1.2E-11,-986.0)) ;
   RCONST(43) = (ARR2(7.0E-12,250.0)) ;
   RCONST(45) = (4.00E-06*SUN) ;
   RCONST(46) = (ARR2(5.4E-12,250.0)) ;
   RCONST(47) = (ARR2(8.0E-20,5500.0)) ;
   RCONST(48) = (ARR2(9.4E+16,-14000.0)) ;
   RCONST(51) = (ARR2(1.1E+2,-1710.0)) ;
   RCONST(53) = (ARR2(1.0E+15,-8000.0)) ;
   RCONST(56) = (ARR2(1.2E-11,-324.0)) ;
   RCONST(57) = (ARR2(5.2E-12,504.0)) ;
   RCONST(58) = (ARR2(1.4E-14,-2105.0)) ;
   RCONST(60) = (ARR2(1.0E-11,-792.0)) ;
   RCONST(61) = (ARR2(2.0E-12,411.0)) ;
   RCONST(62) = (ARR2(1.3E-14,-2633.0)) ;
   RCONST(63) = (ARR2(2.1E-12,322.0)) ;
   RCONST(69) = (ARR2(1.7E-11,116.0)) ;
   RCONST(71) = (5.334E-05*SUN) ;
   RCONST(72) = (ARR2(5.4E-17,-500.0)) ;
   RCONST(74) = (1.654E-04*SUN) ;
   RCONST(80) = (ARR2(1.7E-14,1300.0)) ;
   RCONST = RCONST(:);
      
return

% End of Update_RCONST function                                    
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%                                                                  
% The Reaction Rates File                                          
%                                                                  
% Generated by KPP-2.2.3 symbolic chemistry Kinetics PreProcessor  
%       (http://www.cs.vt.edu/~asandu/Software/KPP)                
% KPP is distributed under GPL, the general public licence         
%       (http://www.gnu.org/copyleft/gpl.html)                     
% (C) 1995-1997, V. Damian & A. Sandu, CGRER, Univ. Iowa           
% (C) 1997-2005, A. Sandu, Michigan Tech, Virginia Tech            
%     With important contributions from:                           
%        M. Damian, Villanova University, USA                      
%        R. Sander, Max-Planck Institute for Chemistry, Mainz, Germany
%                                                                  
% File                 : cbm_Rates.m                               
% Time                 : Fri Mar 15 14:06:05 2013                  
% Working directory    : /home/sandu/kpp-2.2.3/examples/Cbm_matlab 
% Equation file        : cbm.kpp                                   
% Output root filename : cbm                                       
%                                                                  
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~




% Begin Rate Law Functions from KPP_HOME/util/UserRateLaws         

%  User-defined Rate Law functions
%  Note: insert this file at the end of Update_RCONST

%---  Arrhenius
   function [rate] =  ARR( A0,B0,C0 )
      global TEMP CFACTOR
      rate =  (A0) * exp(-(B0)/TEMP) * (TEMP/300.0)^(C0) ;            
   return %  ARR        

%--- Simplified Arrhenius, with two arguments
%--- Note: The argument B0 has a changed sign when compared to ARR
   function [rate] =  ARR2( A0,B0 )
      global TEMP CFACTOR
      rate =  (A0) * exp( (B0)/TEMP ) ;             
   return %  ARR2          

   function [rate] =  EP2(A0,C0,A2,C2,A3,C3)
      global TEMP CFACTOR                       
      K0 = (A0) * exp(-C0/TEMP);
      K2 = (A2) * exp(-C2/TEMP);
      K3 = (A3) * exp(-C3/TEMP);
      K3 = K3*CFACTOR*1.0e+6;
      rate = K0 + K3/(1.0+K3/K2) ;       
   return %  EP2

   function [rate] =  EP3(A1,C1,A2,C2) 
      global TEMP CFACTOR               
      K1 = (A1) * exp(-(C1)/TEMP);
      K2 = (A2) * exp(-(C2)/TEMP);
      rate = K1 + K2*(1.0e+6*CFACTOR);      
   return %  EP3 

   function [rate] =  FALL ( A0,B0,C0,A1,B1,C1,CF)
      global TEMP CFACTOR                      
      K0 = A0 * exp(-B0/TEMP)* (TEMP/300.0)^(C0);
      K1 = A1 * exp(-B1/TEMP)* (TEMP/300.0)^(C1);
      K0 = K0*CFACTOR*1.0e+6;
      K1 = K0/K1;
      rate = (K0/(1.0+K1))*(CF)^(1.0/(1.0+(log(K1))^2));        
   return %  FALL


% End Rate Law Functions from KPP_HOME/util/UserRateLaws           


% Begin INLINED Rate Law Functions                                 


% End INLINED Rate Law Functions                                   

% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%                                                                  
% Update_SUN - update SUN light using TIME                         
%   Arguments :                                                    
%                                                                  
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

function Update_SUN( )

global TIME SUN
 
   SunRise = 4.5;
   SunSet  = 19.5;
   Thour = TIME/3600.;
   Tlocal = Thour - floor(Thour/24)*24;

   if ( (Tlocal>=SunRise) & (Tlocal<=SunSet) ) 
     Ttmp = (2.0*Tlocal-SunRise-SunSet)/(SunSet-SunRise);
     if (Ttmp>0) 
       Ttmp =  Ttmp*Ttmp;
     else
       Ttmp = -Ttmp*Ttmp;
     end 
     SUN = ( 1.0 + cos(pi*Ttmp) )/2.0 ;
   else
     SUN = 0.0;
   end 

return % Update_SUN

% End of Update_SUN function                                       
% ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


