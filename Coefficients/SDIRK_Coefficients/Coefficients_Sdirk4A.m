function [ sdirkMethod sdirkELO sdirkS sdirkName ] = Coefficients_Sdirk4A( S4A )
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% Filename: Coefficients_Sdirk2A.m
%
% Original Author:
%
% File Create Date:
%
% Input Arguments:
%   Name            Type
%                   Integer
%
% Output Arguments:
%   Name            Type
%   sdirkMethod     integer
%   sdirkELO        double
%   sdirkS          integer
%
% Modification History:
%   Date        Developer         Email             Action  
%   7/17/2012   Tony D'Augustine  adaug13@vt.edu    Translated Fortran90 Sdirk4A() method into MATLAB.
%
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
% Coefficients_Sdirk4A:
%   Initializes coefficients for Sdirk4A method.
%
%       Stages  Order
%
%
% Coefficients_Sdirk4A: INPUT ARGUMENTS
%   S4A (integer):
%
% Coefficients_Sdirk4A: OUTPUT ARGUMENTS
%   sdirkMethod (integer):
%   sdirkELO (double):
%   sdirkS (integer):
%
% Coefficients_Sdirk4A: GLOBAL VARIABLES
%   rkA (double):
%   rkB (double):
%   rkC (double):
%   rkD (double):
%   rkE (double):
%   rkBhat (double):
%   rkAlpha (double):
%   rkGamma (double):
%   rkTheta (double):
%
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    global rkA rkB rkC rkD rkE
    global rkBhat
    global rkAlpha rkGamma rkTheta

    sdirkMethod = S4A;

    % Method name
    sdirkName = 'Sdirk4A';

    % Number of stages
    sdirkS = 5;

    % Method coefficients
    rkGamma = .2666666666666666666666666666666667d0;

    rkA(1,1) = .2666666666666666666666666666666667d0;
    rkA(2,1) = .5000000000000000000000000000000000d0;
    rkA(2,2) = .2666666666666666666666666666666667d0;
    rkA(3,1) = .3541539528432732316227461858529820d0;
    rkA(3,2) = -.5415395284327323162274618585298197d-1;
    rkA(3,3) = .2666666666666666666666666666666667d0;
    rkA(4,1) = .8515494131138652076337791881433756d-1;
    rkA(4,2) = -.6484332287891555171683963466229754d-1;
    rkA(4,3) = .7915325296404206392428857585141242d-1;
    rkA(4,4) = .2666666666666666666666666666666667d0;
    rkA(5,1) = 2.100115700566932777970612055999074d0;
    rkA(5,2) = -.7677800284445976813343102185062276d0;
    rkA(5,3) = 2.399816361080026398094746205273880d0;
    rkA(5,4) = -2.998818699869028161397714709433394d0;
    rkA(5,5) = .2666666666666666666666666666666667d0;

    rkB(1)   = 2.100115700566932777970612055999074d0;
    rkB(2)   = -.7677800284445976813343102185062276d0;
    rkB(3)   = 2.399816361080026398094746205273880d0;
    rkB(4)   = -2.998818699869028161397714709433394d0;
    rkB(5)   = .2666666666666666666666666666666667d0;

    rkBhat(1)= 2.885264204387193942183851612883390d0;
    rkBhat(2)= -.1458793482962771337341223443218041d0;
    rkBhat(3)= 2.390008682465139866479830743628554d0;
    rkBhat(4)= -4.129393538556056674929560012190140d0;
    rkBhat(5)= 0.d0;

    rkC(1)   = .2666666666666666666666666666666667d0;
    rkC(2)   = .7666666666666666666666666666666667d0;
    rkC(3)   = .5666666666666666666666666666666667d0;
    rkC(4)   = .3661315380631796996374935266701191d0;
    rkC(5)   = 1.d0;

    % Ynew = Yold + h*Sum_i {rkB_i*k_i} = Yold + Sum_i {rkD_i*Z_i}
    rkD(1)   = 0.d0;
    rkD(2)   = 0.d0;
    rkD(3)   = 0.d0;
    rkD(4)   = 0.d0;
    rkD(5)   = 1.d0;

    % Err = h * Sum_i {(rkB_i-rkBhat_i)*k_i} = Sum_i {rkE_i*Z_i}
    rkE(1)   = -.6804000050475287124787034884002302d0;
    rkE(2)   = 1.558961944525217193393931795738823d0;
    rkE(3)   = -13.55893003128907927748632408763868d0;
    rkE(4)   = 15.48522576958521253098585004571302d0;
    rkE(5)   = 1.d0;

    % Local order of Err estimate
    sdirkELO    = 4;

    % h*Sum_j {rkA_ij*k_j} = Sum_j {rkTheta_ij*Z_j}
    rkTheta(2,1) = 1.875000000000000000000000000000000d0;
    rkTheta(3,1) = 1.708847304091539528432732316227462d0;
    rkTheta(3,2) = -.2030773231622746185852981969486824d0;
    rkTheta(4,1) = .2680325578937783958847157206823118d0;
    rkTheta(4,2) = -.1828840955527181631794050728644549d0;
    rkTheta(4,3) = .2968246986151577397160821594427966d0;
    rkTheta(5,1) = .9096171815241460655379433581446771d0;
    rkTheta(5,2) = -3.108254967778352416114774430509465d0;
    rkTheta(5,3) = 12.33727431701306195581826123274001d0;
    rkTheta(5,4) = -11.24557012450885560524143016037523d0;

    % Starting value for Newton iterations: Z_i^0 = Sum_j {rkAlpha_ij*Z_j}
    rkAlpha(2,1) = 2.875000000000000000000000000000000d0;
    rkAlpha(3,1) = .8500000000000000000000000000000000d0;
    rkAlpha(3,2) = .4434782608695652173913043478260870d0;
    rkAlpha(4,1) = .7352046091658870564637910527807370d0;
    rkAlpha(4,2) = -.9525565003057343527941920657462074d-1;
    rkAlpha(4,3) = .4290111305453813852259481840631738d0;
    rkAlpha(5,1) = -16.10898993405067684831655675112808d0;
    rkAlpha(5,2) = 6.559571569643355712998131800797873d0;
    rkAlpha(5,3) = -15.90772144271326504260996815012482d0;
    rkAlpha(5,4) = 25.34908987169226073668861694892683d0;

%~~~> Coefficients for continuous solution
%          rkD(1,1)= 24.74416644927758d0
%          rkD(1,2)= -4.325375951824688d0
%          rkD(1,3)= 41.39683763286316d0
%          rkD(1,4)= -61.04144619901784d0
%          rkD(1,5)= -3.391332232917013d0
%          rkD(2,1)= -51.98245719616925d0
%          rkD(2,2)= 10.52501981094525d0
%          rkD(2,3)= -154.2067922191855d0
%          rkD(2,4)= 214.3082125319825d0
%          rkD(2,5)= 14.71166018088679d0
%          rkD(3,1)= 33.14347947522142d0
%          rkD(3,2)= -19.72986789558523d0
%          rkD(3,3)= 230.4878502285804d0
%          rkD(3,4)= -287.6629744338197d0
%          rkD(3,5)= -18.99932366302254d0
%          rkD(4,1)= -5.905188728329743d0
%          rkD(4,2)= 13.53022403646467d0
%          rkD(4,3)= -117.6778956422581d0
%          rkD(4,4)= 134.3962081008550d0
%          rkD(4,5)= 8.678995715052762d0

return;
